apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafkadash
  namespace: default
  labels:
    app: kafkadash
    version: v1.0.0
spec:
  replicas: 2
  selector:
    matchLabels:
      app: kafkadash
  template:
    metadata:
      labels:
        app: kafkadash
        version: v1.0.0
      annotations:
        # Force pod restart on config changes
        checksum/config: "{{ include (print $.Template.BasePath \"/configmap.yaml\") . | sha256sum }}"
        checksum/secrets: "{{ include (print $.Template.BasePath \"/secrets.yaml\") . | sha256sum }}"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: kafkadash
        image: kafkadash:latest  # Update with your registry/image
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 4010
          protocol: TCP
        env:
        # Configuration from ConfigMap
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: kafkadash-config
              key: PORT
        - name: UI_PREFIX
          valueFrom:
            configMapKeyRef:
              name: kafkadash-config
              key: UI_PREFIX
        - name: API_PREFIX
          valueFrom:
            configMapKeyRef:
              name: kafkadash-config
              key: API_PREFIX
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: kafkadash-config
              key: NODE_ENV
        - name: KAFKA_CLIENT_ID
          valueFrom:
            configMapKeyRef:
              name: kafkadash-config
              key: KAFKA_CLIENT_ID
        - name: KAFKA_CONSUMER_GROUP
          valueFrom:
            configMapKeyRef:
              name: kafkadash-config
              key: KAFKA_CONSUMER_GROUP
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: kafkadash-config
              key: LOG_LEVEL
        - name: LOG_FILE_PATH
          valueFrom:
            configMapKeyRef:
              name: kafkadash-config
              key: LOG_FILE_PATH
        - name: CACHE_TTL
          valueFrom:
            configMapKeyRef:
              name: kafkadash-config
              key: CACHE_TTL
        - name: MAX_MESSAGES_PER_TOPIC
          valueFrom:
            configMapKeyRef:
              name: kafkadash-config
              key: MAX_MESSAGES_PER_TOPIC
        - name: REQUEST_TIMEOUT
          valueFrom:
            configMapKeyRef:
              name: kafkadash-config
              key: REQUEST_TIMEOUT
        - name: CONNECTION_TIMEOUT
          valueFrom:
            configMapKeyRef:
              name: kafkadash-config
              key: CONNECTION_TIMEOUT
        
        # Secrets for sensitive data
        - name: KAFKA_BROKERS
          valueFrom:
            secretKeyRef:
              name: kafkadash-secrets
              key: KAFKA_BROKERS
        
        # Uncomment these if using Kafka authentication
        # - name: KAFKA_USERNAME
        #   valueFrom:
        #     secretKeyRef:
        #       name: kafkadash-secrets
        #       key: KAFKA_USERNAME
        # - name: KAFKA_PASSWORD
        #   valueFrom:
        #     secretKeyRef:
        #       name: kafkadash-secrets
        #       key: KAFKA_PASSWORD
        # - name: KAFKA_SASL_MECHANISM
        #   valueFrom:
        #     secretKeyRef:
        #       name: kafkadash-secrets
        #       key: KAFKA_SASL_MECHANISM
        
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        
        livenessProbe:
          httpGet:
            path: /api/v1/topics
            port: http
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /api/v1/topics
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false  # Set to true if app doesn't need to write files
          capabilities:
            drop:
            - ALL
        
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: tmp
          mountPath: /tmp
      
      volumes:
      - name: logs
        emptyDir: {}
      - name: tmp
        emptyDir: {}
      
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      
      # Optional: Add node affinity, pod anti-affinity, etc.
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - kafkadash
              topologyKey: kubernetes.io/hostname
